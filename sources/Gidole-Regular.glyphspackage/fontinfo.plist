{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = licenses;
value = "Gidole is dual licensed under OFL (without reserved font name) and MIT license - pick the one you prefer ¯\\_(ツ)_/¯";
},
{
name = licenseURL;
value = "https://raw.githubusercontent.com/larsenwork/Gidole/master/Resources/GidoleFont/License.txt";
},
{
name = versionString;
value = "Version 2.001";
},
{
name = codePageRanges;
value = (
"1252",
"1250"
);
},
{
name = openTypeOS2FamilyClass;
value = (
5,
3
);
},
{
name = panose;
value = (
2,
0,
5,
3,
0,
0,
0,
0,
0,
0
);
},
{
name = fsType;
value = (
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
29,
30,
31,
33,
35,
37,
38,
45,
62
);
},
{
name = vendorID;
value = PfEd;
}
);
date = "2014-12-04 19:46:25 +0000";
familyName = Gidole;
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn CAT;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature subs;
feature sinf;
feature sups;
feature numr;
feature dnom;
feature frac;
feature ordn;
feature case;
feature zero;
feature ss01;
feature ss02;
feature ss03;
feature ss04;
feature ss05;
feature ss06;
feature ss07;
";
tag = aalt;
},
{
automatic = 1;
code = "lookup ccmp_DFLT_1 {
	@CombiningTopAccents = [acutecomb brevecomb breveinvertedcomb caroncomb circumflexcomb commaaboverightcomb commaturnedabovecomb dblgravecomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	lookupflag UseMarkFilteringSet @CombiningTopAccents;
	sub i' @CombiningTopAccents by idotless;
	sub j' @CombiningTopAccents by jdotless;
} ccmp_DFLT_1;

lookup ccmp_latn_1 {
	lookupflag 0;
	sub napostrophe by apostrophemod n;
} ccmp_latn_1;

script latn;
lookup ccmp_latn_1;
";
tag = ccmp;
},
{
automatic = 1;
code = "script latn;
language ROM;
lookup locl_latn_0 {
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
} locl_latn_0;
language MOL;
lookup locl_latn_0;

script latn;
language CAT;
lookup locl_latn_1 {
	sub  l' periodcentered' l by ldot;
	sub  L' periodcentered' L by Ldot;
} locl_latn_1;
";
tag = locl;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
sub parenleft by parenleftinferior;
sub parenright by parenrightinferior;
";
tag = subs;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
sub parenleft by parenleftinferior;
sub parenright by parenrightinferior;
";
tag = sinf;
},
{
automatic = 1;
code = "sub zero by zerosuperior;
sub one by onesuperior;
sub two by twosuperior;
sub three by threesuperior;
sub four by foursuperior;
sub five by fivesuperior;
sub six by sixsuperior;
sub seven by sevensuperior;
sub eight by eightsuperior;
sub nine by ninesuperior;
sub parenleft by parenleftsuperior;
sub parenright by parenrightsuperior;
";
tag = sups;
},
{
automatic = 1;
code = "sub zero by zero.numr;
sub one by one.numr;
sub two by two.numr;
sub three by three.numr;
sub four by four.numr;
sub five by five.numr;
sub six by six.numr;
sub seven by seven.numr;
sub eight by eight.numr;
sub nine by nine.numr;
";
tag = numr;
},
{
automatic = 1;
code = "sub zero by zero.dnom;
sub one by one.dnom;
sub two by two.dnom;
sub three by three.dnom;
sub four by four.dnom;
sub five by five.dnom;
sub six by six.dnom;
sub seven by seven.dnom;
sub eight by eight.dnom;
sub nine by nine.dnom;
";
tag = dnom;
},
{
automatic = 1;
code = "lookup FRAC {
	sub slash by fraction;
} FRAC;
lookup UP {
	sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
} UP;
lookup DOWN {
	sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
} DOWN;
";
tag = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
";
tag = ordn;
},
{
automatic = 1;
code = "sub colon by colon.case;
sub exclamdown by exclamdown.case;
sub questiondown by questiondown.case;
sub parenleft by parenleft.case;
sub parenright by parenright.case;
sub braceleft by braceleft.case;
sub braceright by braceright.case;
sub bracketleft by bracketleft.case;
sub bracketright by bracketright.case;
sub at by at.case;
sub at.ss06 by at.ss06.case;
";
tag = case;
},
{
automatic = 1;
code = "lookupflag IgnoreMarks;
sub f j by f_j;
sub f t by f_t;
";
tag = dlig;
},
{
automatic = 1;
code = "lookupflag IgnoreMarks;
sub f f i by f_f_i;
sub f f by f_f;
sub f i by f_i;
sub f l by f_l;
";
tag = liga;
},
{
automatic = 1;
code = "sub zero by zero.zero;
";
tag = zero;
},
{
automatic = 1;
code = "sub a by a.ss01;
sub aacute by aacute.ss01;
sub abreve by abreve.ss01;
sub abreveacute by abreveacute.ss01;
sub abrevedotbelow by abrevedotbelow.ss01;
sub abrevegrave by abrevegrave.ss01;
sub abrevehookabove by abrevehookabove.ss01;
sub abrevetilde by abrevetilde.ss01;
sub acaron by acaron.ss01;
sub acircumflex by acircumflex.ss01;
sub acircumflexacute by acircumflexacute.ss01;
sub acircumflexdotbelow by acircumflexdotbelow.ss01;
sub acircumflexgrave by acircumflexgrave.ss01;
sub acircumflexhookabove by acircumflexhookabove.ss01;
sub acircumflextilde by acircumflextilde.ss01;
sub adieresis by adieresis.ss01;
sub adotbelow by adotbelow.ss01;
sub agrave by agrave.ss01;
sub ahookabove by ahookabove.ss01;
sub amacron by amacron.ss01;
sub aogonek by aogonek.ss01;
sub aring by aring.ss01;
sub atilde by atilde.ss01;
";
labels = (
{
language = dflt;
value = "Alternate a shape";
}
);
tag = ss01;
},
{
automatic = 1;
code = "sub g by g.ss02;
sub gacute by gacute.ss02;
sub gbreve by gbreve.ss02;
sub gcaron by gcaron.ss02;
sub gcircumflex by gcircumflex.ss02;
sub gcommaaccent by gcommaaccent.ss02;
sub gdotaccent by gdotaccent.ss02;
sub gmacron by gmacron.ss02;
";
labels = (
{
language = dflt;
value = "Alternate g shape";
}
);
tag = ss02;
},
{
automatic = 1;
code = "sub l by l.ss03;
sub lacute by lacute.ss03;
sub lcaron by lcaron.ss03;
sub lcommaaccent by lcommaaccent.ss03;
sub ldot by ldot.ss03;
sub ldotbelow by ldotbelow.ss03;
sub ldotbelowmacron by ldotbelowmacron.ss03;
sub lmacronbelow by lmacronbelow.ss03;
sub lslash by lslash.ss03;
";
labels = (
{
language = dflt;
value = "Alternate l shape";
}
);
tag = ss03;
},
{
automatic = 1;
code = "sub u by u.ss04;
sub uacute by uacute.ss04;
sub ubreve by ubreve.ss04;
sub ucaron by ucaron.ss04;
sub ucircumflex by ucircumflex.ss04;
sub udieresis by udieresis.ss04;
sub udieresisacute by udieresisacute.ss04;
sub udieresiscaron by udieresiscaron.ss04;
sub udieresisgrave by udieresisgrave.ss04;
sub udieresismacron by udieresismacron.ss04;
sub udotbelow by udotbelow.ss04;
sub ugrave by ugrave.ss04;
sub uhookabove by uhookabove.ss04;
sub uhorn by uhorn.ss04;
sub uhornacute by uhornacute.ss04;
sub uhorndotbelow by uhorndotbelow.ss04;
sub uhorngrave by uhorngrave.ss04;
sub uhornhookabove by uhornhookabove.ss04;
sub uhorntilde by uhorntilde.ss04;
sub uhungarumlaut by uhungarumlaut.ss04;
sub umacron by umacron.ss04;
sub uogonek by uogonek.ss04;
sub uring by uring.ss04;
sub utilde by utilde.ss04;
";
labels = (
{
language = dflt;
value = "Alternate u shape";
}
);
tag = ss04;
},
{
automatic = 1;
code = "sub y by y.ss05;
sub yacute by yacute.ss05;
sub ycircumflex by ycircumflex.ss05;
sub ydieresis by ydieresis.ss05;
sub ydotaccent by ydotaccent.ss05;
sub ydotbelow by ydotbelow.ss05;
sub ygrave by ygrave.ss05;
sub yhookabove by yhookabove.ss05;
sub ytilde by ytilde.ss05;
";
labels = (
{
language = dflt;
value = "Alternate y shape";
}
);
tag = ss05;
},
{
automatic = 1;
code = "sub at by at.ss06;
";
labels = (
{
language = dflt;
value = "Alternate @ shape";
}
);
tag = ss06;
},
{
automatic = 1;
code = "sub three by three.ss07;
sub four by four.ss07;
";
labels = (
{
language = dflt;
value = "Alternate 3&4 shape";
}
);
tag = ss07;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1496;
},
{
name = typoDescender;
value = -472;
},
{
name = typoLineGap;
value = 102;
},
{
name = hheaAscender;
value = 1860;
},
{
name = hheaDescender;
value = -460;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1906;
},
{
name = winDescent;
value = 472;
},
{
name = strikeoutPosition;
value = 528;
},
{
name = strikeoutSize;
value = 100;
},
{
name = underlineThickness;
value = 99;
},
{
name = underlinePosition;
value = -99;
},
{
name = subscriptXOffset;
value = 0;
},
{
name = subscriptXSize;
value = 1331;
},
{
name = subscriptYOffset;
value = 287;
},
{
name = subscriptYSize;
value = 1434;
},
{
name = superscriptXOffset;
value = 0;
},
{
name = superscriptXSize;
value = 1331;
},
{
name = superscriptYOffset;
value = 983;
},
{
name = superscriptYSize;
value = 1434;
}
);
guides = (
{
angle = 270;
pos = (549,512);
},
{
pos = (1024,754);
},
{
pos = (1024,1593);
},
{
pos = (1024,1222);
},
{
pos = (1024,722);
},
{
pos = (1024,115);
},
{
pos = (1024,966);
},
{
pos = (1024,1496);
},
{
pos = (1024,-414);
},
{
pos = (1024,1082);
},
{
pos = (1024,1416);
},
{
pos = (1024,541);
}
);
id = m001;
metricValues = (
{
pos = 1536;
},
{
over = -19;
},
{
over = -19;
},
{
over = -19;
},
{
pos = -512;
},
{
},
{
over = 16;
pos = 1082;
},
{
over = 19;
pos = 1416;
}
);
name = Regular;
}
);
instances = (
{
customParameters = (
{
name = postscriptWeightName;
value = Regular;
}
);
instanceInterpolations = {
m001 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "Gidole-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = dflt;
value = "Gidole Regular";
}
);
},
{
key = styleMapFamilyNames;
values = (
{
language = dflt;
value = "Gidole Regular";
}
);
}
);
}
);
kerningLTR = {
m001 = {
fraction = {
eight.dnom = -30;
four.dnom = -90;
three.dnom = -30;
two.dnom = -30;
};
seven.numr = {
fraction = -120;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
},
{
name = "zone 1";
},
{
name = "zone 2";
}
);
properties = (
{
key = copyrights;
values = (
{
language = dflt;
value = "Copyright (c) 2015, Andreas Larsen @larsenwork";
}
);
},
{
key = designerURL;
value = "http://gidole.github.io";
},
{
key = licenses;
values = (
{
language = dflt;
value = "Gidole is dual licensed under OFL (without reserved font name) and MIT license - pick the one you prefer ¯\\_(ツ)_/¯";
}
);
},
{
key = licenseURL;
value = "https://raw.githubusercontent.com/larsenwork/Gidole/master/Resources/GidoleFont/License.txt";
},
{
key = vendorID;
value = PfEd;
},
{
key = versionString;
value = "Version 2.001";
}
);
unitsPerEm = 2048;
userData = {
UFOFormat = 3;
};
versionMajor = 2;
versionMinor = 1;
}
